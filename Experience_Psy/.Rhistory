title = "Distribution des scores par condition, animation et valence",
x     = "Animation des images",
y     = "Score (1–10)"
) +
theme_minimal(base_size = 12) +
theme(
plot.title      = element_text(hjust = 0.5, face = "bold"),
strip.text      = element_text(face = "bold", size = 12),
legend.position = "bottom"
)
# Calcul des statistiques descriptives
stats_summary <- df_full %>%
group_by(condition) %>%
summarise(
n = n(),
mean_perf = mean(correct),
sd_perf = sd(correct),
se_perf = sd(correct) / sqrt(n()),
# Intervalle de confiance à 95%
ci_lower = mean_perf - qt(0.975, df = n()-1) * se_perf,
ci_upper = mean_perf + qt(0.975, df = n()-1) * se_perf,
.groups = "drop"
)
# Graphique principal
ggplot(stats_summary, aes(x = condition, y = mean_perf)) +
# Barres principales avec couleurs distinctes
geom_col(width = 0.6,
aes(fill = condition),
alpha = 0.8,
color = "black",
show.legend = FALSE) +
# Couleurs personnalisées
scale_fill_manual(values = c("Animées" = "#E74C3C", "Fixes" = "#3498DB")) +
# Intervalles de confiance (barres d'erreur noires épaisses)
geom_errorbar(
aes(ymin = ci_lower, ymax = ci_upper),
width = 0.25,
size = 1,
color = "black"
) +
# Pourcentages au-dessus des barres d'erreur
geom_text(
aes(y = ci_upper, label = paste0(round(mean_perf * 100, 1), "%")),
vjust = -0.5,
size = 4,
fontface = "bold"
) +
# Annotations élégantes avec statistiques détaillées
geom_text(
aes(x = condition,
y = mean_perf * 0.15,  # Position dans le bas de chaque barre
label = paste0("IC 95%: [", round(ci_lower, 3), "; ", round(ci_upper, 3), "]\n",
"SD = ", round(sd_perf, 3), " (n = ", n, ")")),
size = 3,
color = "white",
fontface = "bold",
lineheight = 0.9
) +
# Échelle et limites
scale_y_continuous(
labels = percent_format(accuracy = 1),
limits = c(0, max(stats_summary$ci_upper) * 1.12),
breaks = seq(0, 1, by = 0.2),
expand = c(0, 0)
) +
# Labels
labs(
title = "Taux de reconnaissance par condition expérimentale",
x = "Condition",
y = "Taux de réponses correctes",
caption = "Les barres d'erreur représentent les intervalles de confiance à 95%\nSD = Écart-type, IC = Intervalle de confiance, n = Taille d'échantillon"
) +
# Thème épuré
theme_classic() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.caption = element_text(hjust = 0.5, size = 10, color = "gray40"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 11),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black")
)
table(df_full$participant)
table(df_full$correct)
table(df_full$condition)
table(df_all$condition)
df_full_sans22 <- df_full[df_full$participant != "P022", ]
table(df_full_sans22$condition)
df_full_sans22 <- df_full[df_full$participant != "022", ]
table(df_full_sans22$condition)
table(df_all$condition)
table(df_full_sans22$condition)
library(dplyr)
df_full %>%
# si votre colonne s’appelle "condition" ou "Animation", ajustez ci-dessous :
group_by(participant, condition) %>%
summarise(n_photos = n(), .groups = "drop") %>%
# pour un affichage en large : une colonne Static et une colonne Animated
tidyr::pivot_wider(
names_from  = condition,
values_from = n_photos,
values_fill = 0
)
library(dplyr)
test <- df_full %>%
# si votre colonne s’appelle "condition" ou "Animation", ajustez ci-dessous :
group_by(participant, condition) %>%
summarise(n_photos = n(), .groups = "drop") %>%
# pour un affichage en large : une colonne Static et une colonne Animated
tidyr::pivot_wider(
names_from  = condition,
values_from = n_photos,
values_fill = 0
)
View(test)
View(df)
csv_dir <- here::here("data", "raw_data")
# Lister les fichiers CSV, en excluant ceux qui sont vides
files <- list.files(
path       = csv_dir,
pattern    = "_Emotion.*\\.csv$",
full.names = TRUE
)
files <- files[file.info(files)$size > 0]
# Fonction pour traiter chaque fichier individuel
process_data <- function(fp) {
pid <- str_extract(basename(fp), "\\d+(?=_Emotion)")
df  <- read.csv(fp, header = TRUE, stringsAsFactors = FALSE)
# Ignorer les fichiers avec un nombre d'essais insuffisant
if (nrow(df) < 44) {
stop("Moins de 44 lignes, nombre d'essais insuffisant.")
}
df <- df[44:nrow(df), ]
df %>%
mutate(
participant   = pid,
condition     = case_when(
grepl("FIX", ImagesDistracteursFile, ignore.case = TRUE)     ~ "Fixes",
grepl("anim", ImagesDistracteursFile, ignore.case = TRUE) ~ "Animées",
TRUE                                                         ~ NA_character_
),
is_distractor = grepl("Distracteurs", ImagesDistracteursFile, ignore.case = TRUE),
correct       = case_when(
is_distractor & mouse.clicked_name == "Faux" ~ 1,
!is_distractor & mouse.clicked_name == "Vrai" ~ 1,
TRUE                                         ~ 0
)
) %>%
# Garder uniquement les essais correspondant à nos conditions
filter(!is.na(condition))
}
# Appliquer la fonction à chaque fichier, en gérant les erreurs potentielles
df_list <- map(files, function(fp) {
tryCatch(
process_data(fp),
error = function(e) {
warning(sprintf("→ Fichier '%s' ignoré : %s", basename(fp), e$message))
return(NULL)
}
)
})
# Combiner tous les dataframes en un seul
df_all <- bind_rows(df_list)
# Charger les données des participants (âge, sexe, etc.)
# Adaptez "data/covariates/TABLEAU-PARTICIPANTS 2.xlsx" si nécessaire
covariates_path <- here::here("data", "covariates", "TABLEAU-PARTICIPANTS 3.xlsx")
participants_df <- read_excel(covariates_path)
# Fusionner les données d'essais avec les covariables
df_full <- df_all %>%
left_join(participants_df, by = "participant")
# Centrer les variables continues et factoriser les variables catégorielles
df_full <- df_full %>%
mutate(
age_c        = scale(Âge, center = TRUE, scale = FALSE)[,1],
depression_c = scale(depression, center = TRUE, scale = FALSE)[,1],
sex          = factor(Sexe),
education    = factor(education, ordered = TRUE, levels = c("Secondaire", "Bâchelier", "Universitaire"))
)
library(dplyr)
test <- df_full %>%
# si votre colonne s’appelle "condition" ou "Animation", ajustez ci-dessous :
group_by(participant, condition) %>%
summarise(n_photos = n(), .groups = "drop") %>%
# pour un affichage en large : une colonne Static et une colonne Animated
tidyr::pivot_wider(
names_from  = condition,
values_from = n_photos,
values_fill = 0
)
View(df_full)
# Calcul des statistiques descriptives
stats_summary <- df_full %>%
group_by(condition) %>%
summarise(
n = n(),
mean_perf = mean(correct),
sd_perf = sd(correct),
se_perf = sd(correct) / sqrt(n()),
# Intervalle de confiance à 95%
ci_lower = mean_perf - qt(0.975, df = n()-1) * se_perf,
ci_upper = mean_perf + qt(0.975, df = n()-1) * se_perf,
.groups = "drop"
)
# Graphique principal
ggplot(stats_summary, aes(x = condition, y = mean_perf)) +
# Barres principales avec couleurs distinctes
geom_col(width = 0.6,
aes(fill = condition),
alpha = 0.8,
color = "black",
show.legend = FALSE) +
# Couleurs personnalisées
scale_fill_manual(values = c("Animées" = "#E74C3C", "Fixes" = "#3498DB")) +
# Intervalles de confiance (barres d'erreur noires épaisses)
geom_errorbar(
aes(ymin = ci_lower, ymax = ci_upper),
width = 0.25,
size = 1,
color = "black"
) +
# Pourcentages au-dessus des barres d'erreur
geom_text(
aes(y = ci_upper, label = paste0(round(mean_perf * 100, 1), "%")),
vjust = -0.5,
size = 4,
fontface = "bold"
) +
# Annotations élégantes avec statistiques détaillées
geom_text(
aes(x = condition,
y = mean_perf * 0.15,  # Position dans le bas de chaque barre
label = paste0("IC 95%: [", round(ci_lower, 3), "; ", round(ci_upper, 3), "]\n",
"SD = ", round(sd_perf, 3), " (n = ", n, ")")),
size = 3,
color = "white",
fontface = "bold",
lineheight = 0.9
) +
# Échelle et limites
scale_y_continuous(
labels = percent_format(accuracy = 1),
limits = c(0, max(stats_summary$ci_upper) * 1.12),
breaks = seq(0, 1, by = 0.2),
expand = c(0, 0)
) +
# Labels
labs(
title = "Taux de reconnaissance par condition expérimentale",
x = "Condition",
y = "Taux de réponses correctes",
caption = "Les barres d'erreur représentent les intervalles de confiance à 95%\nSD = Écart-type, IC = Intervalle de confiance, n = Taille d'échantillon"
) +
# Thème épuré
theme_classic() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.caption = element_text(hjust = 0.5, size = 10, color = "gray40"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 11),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black")
)
df_full_sans22 <- df_full[df_full$participant != "022", ]
# Calcul des statistiques descriptives
stats_summary <- df_full_sans22 %>%
group_by(condition) %>%
summarise(
n = n(),
mean_perf = mean(correct),
sd_perf = sd(correct),
se_perf = sd(correct) / sqrt(n()),
# Intervalle de confiance à 95%
ci_lower = mean_perf - qt(0.975, df = n()-1) * se_perf,
ci_upper = mean_perf + qt(0.975, df = n()-1) * se_perf,
.groups = "drop"
)
# Graphique principal
ggplot(stats_summary, aes(x = condition, y = mean_perf)) +
# Barres principales avec couleurs distinctes
geom_col(width = 0.6,
aes(fill = condition),
alpha = 0.8,
color = "black",
show.legend = FALSE) +
# Couleurs personnalisées
scale_fill_manual(values = c("Animées" = "#E74C3C", "Fixes" = "#3498DB")) +
# Intervalles de confiance (barres d'erreur noires épaisses)
geom_errorbar(
aes(ymin = ci_lower, ymax = ci_upper),
width = 0.25,
size = 1,
color = "black"
) +
# Pourcentages au-dessus des barres d'erreur
geom_text(
aes(y = ci_upper, label = paste0(round(mean_perf * 100, 1), "%")),
vjust = -0.5,
size = 4,
fontface = "bold"
) +
# Annotations élégantes avec statistiques détaillées
geom_text(
aes(x = condition,
y = mean_perf * 0.15,  # Position dans le bas de chaque barre
label = paste0("IC 95%: [", round(ci_lower, 3), "; ", round(ci_upper, 3), "]\n",
"SD = ", round(sd_perf, 3), " (n = ", n, ")")),
size = 3,
color = "white",
fontface = "bold",
lineheight = 0.9
) +
# Échelle et limites
scale_y_continuous(
labels = percent_format(accuracy = 1),
limits = c(0, max(stats_summary$ci_upper) * 1.12),
breaks = seq(0, 1, by = 0.2),
expand = c(0, 0)
) +
# Labels
labs(
title = "Taux de reconnaissance par condition expérimentale",
x = "Condition",
y = "Taux de réponses correctes",
caption = "Les barres d'erreur représentent les intervalles de confiance à 95%\nSD = Écart-type, IC = Intervalle de confiance, n = Taille d'échantillon"
) +
# Thème épuré
theme_classic() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.caption = element_text(hjust = 0.5, size = 10, color = "gray40"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 11),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black")
)
#Avec aov() et la syntaxe Error() pour spécifier l’effet aléatoire des sujets (ici participant) et la structure intra-sujets condition
rm_anova <- aov(
pct_correct ~ condition +
Error(participant/condition),
data = summary_df
)
summary(rm_anova)
# Agréger les données par participant et condition
summary_df <- df_full_sans22 %>%
group_by(participant, condition, age_c, sex, education, depression_c) %>%
summarise(pct_correct = mean(correct), .groups = "drop")
#Avec aov() et la syntaxe Error() pour spécifier l’effet aléatoire des sujets (ici participant) et la structure intra-sujets condition
rm_anova <- aov(
pct_correct ~ condition +
Error(participant/condition),
data = summary_df
)
summary(rm_anova)
# Agréger les données par participant et condition
summary_df <- df_full %>%
group_by(participant, condition, age_c, sex, education, depression_c) %>%
summarise(pct_correct = mean(correct), .groups = "drop")
# ANCOVA à mesures répétées
rm_ancova <- aov(
pct_correct ~ condition
Error(participant / (condition)),
# ANCOVA à mesures répétées
rm_ancova <- aov(
pct_correct ~ condition +
Error(participant / (condition)),
data = summary_df
)
print(summary(rm_ancova))
# Graphique principal
ggplot(stats_summary, aes(x = condition, y = mean_perf)) +
# Barres principales avec couleurs distinctes
geom_col(width = 0.6,
aes(fill = condition),
alpha = 0.8,
color = "black",
show.legend = FALSE) +
# Couleurs personnalisées
scale_fill_manual(values = c("Animées" = "#E74C3C", "Fixes" = "#3498DB")) +
# Intervalles de confiance (barres d'erreur noires épaisses)
geom_errorbar(
aes(ymin = ci_lower, ymax = ci_upper),
width = 0.25,
size = 1,
color = "black"
) +
# Pourcentages au-dessus des barres d'erreur
geom_text(
aes(y = ci_upper, label = paste0(round(mean_perf * 100, 1), "%")),
vjust = -0.5,
size = 4,
fontface = "bold"
) +
# Annotations élégantes avec statistiques détaillées
geom_text(
aes(x = condition,
y = mean_perf * 0.15,  # Position dans le bas de chaque barre
label = paste0("IC 95%: [", round(ci_lower, 3), "; ", round(ci_upper, 3), "]\n",
"SD = ", round(sd_perf, 3))), #" (n = ", n, ")")),
size = 3,
color = "white",
fontface = "bold",
lineheight = 0.9
) +
# Échelle et limites
scale_y_continuous(
labels = percent_format(accuracy = 1),
limits = c(0, max(stats_summary$ci_upper) * 1.12),
breaks = seq(0, 1, by = 0.2),
expand = c(0, 0)
) +
# Labels
labs(
title = "Taux de reconnaissance par condition expérimentale",
x = "Condition",
y = "Taux de réponses correctes",
caption = "Les barres d'erreur représentent les intervalles de confiance à 95%\nSD = Écart-type, IC = Intervalle de confiance"
) +
# Thème épuré
theme_classic() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.caption = element_text(hjust = 0.5, size = 10, color = "gray40"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 11),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black")
)
# Agréger les données par participant et condition
summary_df <- df_full %>%
group_by(participant, condition, age_c, sex, education, depression_c) %>%
summarise(pct_correct = mean(correct), .groups = "drop")
# ANCOVA à mesures répétées
rm_ancova <- aov(
pct_correct ~ condition +
Error(participant / (condition)),
data = summary_df
)
print(summary(rm_ancova))
summary_df <- df_full %>%
group_by(participant, condition, age_c, sex, education, depression_c) %>%
summarise(pct_correct = mean(correct), .groups = "drop")
if (!requireNamespace("xfun", quietly = TRUE) ||
packageVersion("xfun") < "0.52.0") {
install.packages("xfun")
}
# 1. Liste des packages
packages <- c(
"tidyverse", "here", "readxl", "lme4", "performance",
"sjPlot", "emmeans", "effectsize", "gtsummary"
)
# 2. Installe et charge
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
summary_df <- df_full %>%
group_by(participant, condition, age_c, sex, education, depression_c) %>%
summarise(pct_correct = mean(correct), .groups = "drop")
# ANCOVA à mesures répétées
rm_ancova <- aov(
pct_correct ~ condition * education + age_c + sex + depression_c +
Error(participant / (condition * education)),
data = summary_df
)
print(summary(rm_ancova))
# Si pas déjà installés
install.packages(c("effectsize", "pwr"))
library(effectsize)
library(pwr)
install.packages(c("effectsize", "pwr"))
library(effectsize)
library(pwr)
# --- 1. Taille de l'effet depuis votre ANOVA ezANOVA ---
# ezANOVA retourne un tableau dans $ANOVA
rm_ancova$ANOVA
# η² partiel
eta_sq <- eta_squared(rm_ancova$aov, partial = TRUE)
# ANCOVA à mesures répétées
rm_ancova <- aov(
pct_correct ~ condition +
Error(participant / (condition)),
data = summary_df
)
print(summary(rm_ancova))
# Calcul de la taille d'effet (Eta-squared partiel)
print(effectsize::eta_squared(rm_ancova, partial = TRUE))
res_aov <- ezANOVA(
data = df2,
dv = EVEIL.response,
wid = participant,
within = .(Animation, Valence),
type = 3,
detailed = TRUE,
return_aov = TRUE
)
# 4. ANOVA à mesures répétées 2x2 sur l’éveil émotionnel
install.packages("ez")
library(ez)
install.packages("ez")
library(ez)
res_aov <- ezANOVA(
data = df2,
dv = EVEIL.response,
wid = participant,
within = .(Animation, Valence),
type = 3,
detailed = TRUE,
return_aov = TRUE
)
print(res_aov)
